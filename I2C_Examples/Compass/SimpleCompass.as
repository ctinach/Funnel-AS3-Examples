package  {		import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.Event;		import funnel.*;	import funnel.i2c.*;		/*	 * Display heading values of a HMC6352 compass module.	 * Connect a HMC6352 compass module to the Fio	 * A2: the ground pin	 * A3: the power pin	 * A4: the I2C data pin	 * A5: the I2C clock pin	 *	 * SimpleI2CFirmataWithI2C to the Arduino	 *	 */		public class SimpleCompass extends MovieClip {				private var fio:Fio;		private var compass:HMC6352;		private var clockHand:Shape;						public function SimpleCompass() {			var config:Configuration = Fio.FIRMATA;						fio = new Fio([1], config);			fio.addEventListener(FunnelEvent.READY, onReady);						// create the compass graphic			drawCompass();		}				private function onReady(event:FunnelEvent):void {						fio.removeEventListener(FunnelEvent.READY, onReady);						// create a new instance of the digital compass and pass in a			// reference to the fio module			compass = new HMC6352(fio.ioModule(1));			compass.addEventListener(Event.CHANGE, onCompassHeadingChange);		}				private function onCompassHeadingChange(e:Event):void {			clockHand.rotation = compass.heading;		}				// draw a simple compass		private function drawCompass():void {						// Create a new Shape object			// Use a shape when you need to programatically draw graphics			// that you don't need to interact with because Shape does not			// support user inputs and you cannot add children to a Shape.			// Use a Sprite if you need to support interactivity and/or			// nested objects.			clockHand = new Shape();						//position the shape			clockHand.x = stage.stageWidth/2;			clockHand.y = stage.stageHeight/2;						// draw the compass body			clockHand.graphics.clear();				clockHand.graphics.lineStyle(2, 0x000000);			clockHand.graphics.beginFill(0xEEEEEE);			clockHand.graphics.drawCircle(0, 0, 102);			clockHand.graphics.endFill();						// draw the compass needle			clockHand.graphics.lineStyle(1, 0x000000);			clockHand.graphics.beginFill(0xFF0000);			clockHand.graphics.moveTo(0, -100);			clockHand.graphics.lineTo(20, 20);			clockHand.graphics.lineTo(0, 0);			clockHand.graphics.lineTo(-20, 20);			clockHand.graphics.lineTo(0, -100);			clockHand.graphics.endFill();					// set the initial rotation			clockHand.rotation = 0;			this.addChild(clockHand);					}					}	}