package  {	    /*	* Test class for LIS3LV02DQ 3 axis accelerometer	* Using Sparkfun breakout board: http://www.sparkfun.com/products/758	* and Arduino FIO: http://www.sparkfun.com/products/9712	* 	* Connection:	* 	* ADXL345	->	Arduino FIO (or other 3.3v Arduino variant)	* vcc		->	3.3v	* gnd 		->	gnd	* int1	(NC)		* sdo   (NC)	* sda		->	A4	* scl		->	A5	* cs		->	3.3v	* ck    (NC)	*	*/			import flash.display.MovieClip;		import funnel.*;	import funnel.i2c.LIS3LV02DQ;	import flash.events.Event;	import flash.geom.Vector3D;	import flash.geom.Matrix3D;	import flash.display.Shape;	import funnel.FunnelEvent;		public class AcclTest extends MovieClip {				private var fio:Fio;		private var accl:LIS3LV02DQ;				var sensorPin:Pin;		var sensorPin2:Pin;				var button1:Pin;		var button2:Pin;		// create a signal scope to see the analog value		var signalScope:SignalScope;				private var acclHandler:AccelerometerHandler;				private var ellipse:Shape = new Shape();				public function AcclTest() {						var config:Configuration = Fio.FIRMATA;			config.setDigitalPinMode(7, IN);	// set A3 as digital input			config.setDigitalPinMode(16, IN);						// set analog pin 1 - 8 to digital input (the Arduio has 8 analog inputs, but only 8 are exposed)			//for (var i:uint = 15; i < 22; i++) {				//config.setDigitalPinMode(i, DIN);			//}						fio = new Fio([1], config);									ellipse = drawEllipse(0, 0, 0, 0xFF0000);			addChild(ellipse);						fio.addEventListener(FunnelEvent.READY, onReady);		}				private function onReady(evt:FunnelEvent):void {						fio.removeEventListener(FunnelEvent.READY, onReady);						// parameters: x, y, points (width), label, min, max			signalScope = new SignalScope(20, 140, 200, "Potentiometer", 0, 1);			addChild(signalScope);						// get a reference to the analog input pin			sensorPin = fio.ioModule(1).analogPin(0);			//sensorPin.addEventListener(Event.CHANGE, onPinChange);						//sensorPin2 = fio.ioModule(1).analogPin(7);			//sensorPin2.addEventListener(Event.CHANGE, onPinChange);						button1 = fio.ioModule(1).digitalPin(16);			button1.addEventListener(Event.CHANGE, onPinChange);						button2 = fio.ioModule(1).digitalPin(7);			button2.addEventListener(Event.CHANGE, onPinChange);						accl = new LIS3LV02DQ(fio.ioModule(1), false, LIS3LV02DQ.DEVICE_ID, LIS3LV02DQ.RANGE_6G);			accl.addEventListener(Event.CHANGE, onAcclUpdate);						acclHandler = new AccelerometerHandler();						accl.startReading();						addEventListener(Event.ENTER_FRAME, onEnterFrame);		}				private function drawEllipse(x:Number, y:Number, z:Number, c:Number):Shape {			var s:Shape = new Shape();			s.x = x;			s.y = y;			s.z = z;			s.graphics.beginFill(c);			s.graphics.lineStyle(2);			s.graphics.drawEllipse(0, 0, 100, 60);			s.graphics.endFill();			return s;		}				private function onAcclUpdate(evt:Event):void {			acclHandler.update(evt.currentTarget.x, evt.currentTarget.y, evt.currentTarget.z);								xVal.text = acclHandler.force.x.toFixed(2);			yVal.text = acclHandler.force.y.toFixed(2);			zVal.text = acclHandler.force.z.toFixed(2);						//xVal.text = acclHandler.rawAcceleration.x.toFixed(2);			//yVal.text = acclHandler.rawAcceleration.y.toFixed(2);			//zVal.text = acclHandler.rawAcceleration.z.toFixed(2);			var orient:Vector3D = acclHandler.orientation;			//xVal.text = orient.x.toFixed(2);			//yVal.text = orient.y.toFixed(2);			//zVal.text = orient.z.toFixed(2);	// z is not implemented						var centerPt:Vector3D = new Vector3D(stage.stageWidth/2, stage.stageHeight/2, 0);			//acclHandler.transform.transpose();			acclHandler.transform.position = centerPt;			ellipse.transform.matrix3D = acclHandler.transform;		}				private function onPinChange(evt:Event):void {			trace("pin " + evt.target.number + "\tvalue = " + evt.target.value);		}				private function onEnterFrame(e:Event):void {			signalScope.update(sensorPin.value);		}	}	}