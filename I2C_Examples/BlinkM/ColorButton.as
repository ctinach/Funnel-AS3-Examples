package  {		import flash.display.Sprite;	import flash.display.Shape;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.geom.Rectangle;		public class ColorButton extends Sprite {				private var _btnShape:Shape;		private var _color:uint;		private var _label:TextField;		public function ColorButton(color:uint, labelText:String = "") {						_color = color;						// create a new shape			_btnShape = new Shape();			// draw the graphics in the shape			drawButton(_color);			// add the shape to this Sprite object			this.addChild(_btnShape);							// create a label for the button			createLabel(labelText);						// disable children of this object from receiving mouse events			this.mouseChildren = false;						// this will make a hand cursor appear on roll over			this.buttonMode = true;						this.addEventListener(MouseEvent.MOUSE_OVER, onMouseOver);			this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);			this.addEventListener(MouseEvent.MOUSE_DOWN, onMousePress);			this.addEventListener(MouseEvent.MOUSE_UP, onMouseRelease);						// create 9 slice scale grid to maintain shape corner radius			// when button is scaled			var grid:Rectangle = new Rectangle(10, 10, 100, 20);			this.scale9Grid = grid;		}				// call this method to change the color of the button		public function set color(color:uint):void {			_color = color;						// redraw the button to apply the new color			drawButton(_color);		}				// call this method to get the color of the button		public function get color():uint {			return _color;		}				private function drawButton(color:uint):void {			// you can add graphics to Shape, Sprite, and MovieClip objects			_btnShape.graphics.clear();			_btnShape.graphics.beginFill(color, 1.0);			_btnShape.graphics.drawRoundRect(0, 0, 120, 40, 10);			_btnShape.graphics.endFill();		}						// call this method to change the button label		public function setLabel(labelText:String):void {			_label.text = labelText;		}				private function createLabel(labelText:String):void {			// create an instance of TextFormat to style the text			var format:TextFormat = new TextFormat();			format.font = "Helvetica";			format.size = 17;			format.color = 0x333333;						_label = new TextField();			// apply the formatting to the text			_label.defaultTextFormat = format;			_label.width = _btnShape.width;			// set the autoSize property to prevent cropping			_label.autoSize = TextFieldAutoSize.CENTER;			_label.x = this.width/2;			_label.y = _btnShape.y + (_btnShape.height - _label.height)/4;			this.addChild(_label);						setLabel(labelText);		}				private function onMouseOver(evt:MouseEvent):void {			// lighten			_btnShape.alpha = 0.75;		}				private function onMouseOut(evt:MouseEvent):void {			_btnShape.alpha = 1.0;		}				private function onMousePress(evt:MouseEvent):void {			// lighten			_btnShape.alpha = 0.5;		}				private function onMouseRelease(evt:MouseEvent):void {			_btnShape.alpha = 1.0;		}	}	}